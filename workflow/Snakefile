# configfile: "config.yaml"

rule bbox_geodata:
    input:
        "data/interim/geodata.geojson"
    output:
        "data/interim/bbox_geodata.geojson"
    conda:
        "ox"
    shell:
        "python -m src.data.bbox_geodata 32.2 41.14 49.89 58.26 {input} {output}"

rule add_geometry:
    input:
        "data/interim/cleaned_data_with_city.csv"
    output:
        "data/interim/geodata.geojson"
    conda:
        "ox"
    shell:
        "python -m src.data.add_geometry {input} {output}"

rule osm_tags_adm:
    input:
        "data/external/russia-bbox.osm.pbf"
    output:
        "data/external/russia-bbox-tags_adm.osm.pbf"
    conda:
        "osmium-tool"
    shell:
        "osmium tags-filter {input} boundary=administrative -o {output}"

rule osm_tags_poi:
    input:
        "data/external/russia-bbox.osm.pbf"
    output:
        "data/external/russia-bbox-tags_poi.osm.pbf"
    conda:
        "osmium-tool"
    shell:
        "osmium tags-filter {input} aeroway=terminal amenity building=office,train_station highway=bus_stop shop tourism=hotel -o {output}"

rule osm_extract_bbox:
    input:
        "data/external/russia-latest.osm.pbf"
    output:
        "data/external/russia-bbox.osm.pbf"
    conda:
        "osmium-tool"
    shell:
        "osmium extract -b 32.2,41.14,49.89,58.26 {input} -o {output}"

rule get_osm_data:
    # comment output for activate download and update OSM data
    output:
        "data/external/russia-latest.osm.pbf"
    conda:
        "ox"
    shell:
        "python -m src.data.get_osm_data russia data/external"

rule add_city:
    input:
        ["data/interim/cleaned_data_v2.csv", "data/external/geocoded_addresses.json"]
    output:
        "data/interim/cleaned_data_with_city.csv"
    shell:
        "python -m src.features.add_city {input} {output}"

rule clean_address:
    input:
        ["data/interim/combined_data_v2.csv", "data/external/geocoded_addresses.json"]
    output:
        ["data/interim/cleaned_data_v2.csv", "data/interim/manual_address_check_v2.csv"]
    shell:
        "python -m src.data.clean_address {input} {output} 1"

rule geocode_address:
    input:
        "data/interim/combined_data_v2.csv"
    output:
        "data/external/geocoded_addresses.json"
    shell:
        "python -m src.data.geocode_address {input} {output}"

rule combine_data:
    input:
        "data/raw/train.csv",
        "data/raw/test.csv"
    output:
        "data/interim/combined_data_v2.csv"
    shell:
        "python -m src.data.combine_data {input} {output}"